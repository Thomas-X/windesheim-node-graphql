{"version":3,"sources":["webpack:///webpack/bootstrap 01c3c98dcab464825f07","webpack:///./src/index.js","webpack:///./src/connector/DB.js","webpack:///external \"sequelize\"","webpack:///external \"dotenv\"","webpack:///./src/getServerData.js","webpack:///external \"merge-graphql-schemas\"","webpack:///external \"path\"","webpack:///./src/resolvers/index.js","webpack:///./src/resolvers/hello.js","webpack:///external \"express\"","webpack:///external \"apollo-server-express\""],"names":["require","config","resolvers","types","getServerData","server","ApolloServer","typeDefs","app","express","applyMiddleware","port","listen","console","log","graphqlPath","DB_HOST","DB_DIALECT","DB_PORT","DB_USER","DB_PASSWORD","process","env","db","Sequelize","host","dialect","operatorsAliases","pool","max","min","acquire","idle","authenticate","then","catch","err","error","mergeTypes","fileLoader","path","mergeResolvers","allResolvers","hello","Query","name","dateofbirth"],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAA,mBAAOA,CAAC,CAAR,EAAkBC,MAAlB;AACA;AACA;AACA;AACA;;AAEA,MAAM,EAACC,SAAD,EAAYC,KAAZ,KAAqBC,uEAAaA,EAAxC;AACA,MAAMC,SAAS,IAAIC,mEAAJ,CAAiB,EAACJ,SAAD,EAAYK,UAAUJ,KAAtB,EAAjB,CAAf;;AAEA,MAAMK,MAAMC,+CAAOA,EAAnB;AACAJ,OAAOK,eAAP,CAAuB,EAACF,GAAD,EAAvB;;AAEA,MAAMG,OAAO,IAAb;;AAEAH,IAAII,MAAJ,CAAW,EAACD,IAAD,EAAX,EAAmB,MAAM;AACvBE,UAAQC,GAAR,CAAa,uCAAsCH,IAAK,GAAEN,OAAOU,WAAY,EAA7E;AACA,CAFF,E;;;;;;;ACfA;AAAA;AAAA;AACA,MAAM,EAACC,OAAD,EAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwCC,WAAxC,KAAuDC,QAAQC,GAArE;AACA,MAAMC,KAAK,IAAIC,iDAAJ,CAAcP,UAAd,EAA0BE,OAA1B,EAAmCC,WAAnC,EAAgD;AAC1DK,OAAMT,OADoD;AAE1DU,UAAST,UAFiD;AAG1DU,mBAAkB,KAHwC;AAI1DhB,OAAMO,OAJoD;AAK1DU,OAAM;AACLC,OAAK,CADA;AAELC,OAAK,CAFA;AAGLC,WAAS,KAHJ;AAILC,QAAM;AAJD;AALoD,CAAhD,CAAX;AAYAT,GACEU,YADF,GAEEC,IAFF,CAEO,MAAM;AACXrB,SAAQC,GAAR,CAAY,+CAAZ;AACA,CAJF,EAKEqB,KALF,CAKQC,OAAO;AACbvB,SAAQwB,KAAR,CAAc,oCAAd,EAAoDD,GAApD;AACA,CAPF;;AAUeb,4EAAf,E;;;;;;ACxBA,sC;;;;;;ACAA,mC;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEe,+DAAM;AACpB,OAAMpB,QAAQmC,yEAAUA,CAACC,yEAAUA,CAAE,GAAEC,6CAAA,CAAa,aAAb,CAA4B,qBAA1C,CAAX,CAAd;AACA;AACA;AACA;AACA,OAAMtC,YAAYuC,6EAAcA,CAACC,iEAAf,CAAlB;AACA,QAAO,EAAEvC,KAAF,EAASD,SAAT,EAAP;AAEA,CARD,E;;;;;;ACJA,kD;;;;;;ACAA,iC;;;;;;;ACAA;AAAA;;AAEe,0DACbyC,uDADa,CAAf,E;;;;;;;ACFA;AACe;AACdC,QAAO;AACND,SAAO,OAAO,EAACE,MAAM,MAAP,EAAeC,aAAa,MAA5B,EAAP;AADD;AADO,CAAf,E;;;;;;ACDA,oC;;;;;;ACAA,kD","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 01c3c98dcab464825f07","// load .env file into process.env global\nrequire('dotenv').config();\nimport getServerData from './getServerData';\nimport express from 'express';\nimport {ApolloServer} from 'apollo-server-express';\nimport './connector/DB';\n\nconst {resolvers, types} = getServerData();\nconst server = new ApolloServer({resolvers, typeDefs: types});\n\nconst app = express();\nserver.applyMiddleware({app});\n\nconst port = 4000;\n\napp.listen({port}, () => {\n\t\tconsole.log(`ðŸš€ Server ready at http://localhost:${port}${server.graphqlPath}`)\n\t}\n);\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import Sequelize from 'sequelize';\nconst {DB_HOST, DB_DIALECT, DB_PORT, DB_USER, DB_PASSWORD} = process.env;\nconst db = new Sequelize(DB_DIALECT, DB_USER, DB_PASSWORD, {\n\thost: DB_HOST,\n\tdialect: DB_DIALECT,\n\toperatorsAliases: false,\n\tport: DB_PORT,\n\tpool: {\n\t\tmax: 5,\n\t\tmin: 0,\n\t\tacquire: 30000,\n\t\tidle: 10000\n\t},\n});\ndb\n\t.authenticate()\n\t.then(() => {\n\t\tconsole.log('Connection has been established successfully.');\n\t})\n\t.catch(err => {\n\t\tconsole.error('Unable to connect to the database:', err);\n\t});\n\n\nexport default db;\n\n\n// WEBPACK FOOTER //\n// ./src/connector/DB.js","module.exports = require(\"sequelize\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 4\n// module chunks = 0","import {fileLoader, mergeResolvers, mergeTypes} from \"merge-graphql-schemas\";\nimport * as path from \"path\";\nimport allResolvers from './resolvers/index';\n\nexport default () => {\n\tconst types = mergeTypes(fileLoader(`${path.resolve('./src/types')}/**/*.{graphql,gql}`));\n\t// this way is more convenient since we don't have to keep track of our /src/resolvers/index.js file but\n\t// it forces us to use the syntax supported by the current node version. because webpack doesn't transpile non-imported/required files.\n\t// const resolvers = mergeResolvers(fileLoader(`${path.resolve('./src/resolvers')}/**/*.js`));\n\tconst resolvers = mergeResolvers(allResolvers);\n\treturn { types, resolvers };\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/getServerData.js","module.exports = require(\"merge-graphql-schemas\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"merge-graphql-schemas\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 7\n// module chunks = 0","import hello from './hello';\n\nexport default [\n\t\thello\n];\n\n\n// WEBPACK FOOTER //\n// ./src/resolvers/index.js","// module.exports is used here because webpack is not compiling non-required / imported files\nexport default {\n\tQuery: {\n\t\thello: () => ({name: 'skdj', dateofbirth: '2989'})\n\t},\n};\n\n\n// WEBPACK FOOTER //\n// ./src/resolvers/hello.js","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"apollo-server-express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-server-express\"\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}